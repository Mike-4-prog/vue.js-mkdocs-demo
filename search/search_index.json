{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Vue.js","text":"<p>Approachable, Versatile, and Performant Vue.js is the progressive framework for building user interfaces.</p> <p></p> <p>Get Started :arrow_right: View on GitHub \ud83d\udc19</p>"},{"location":"#whats-next","title":"What's Next?","text":"<p>Learn the Basics Start with the core concepts in Getting Started.</p> <p>Explore the Essentials Understand how Vue works with templates, reactivity, and components.</p> <p>Use Built-in Components Discover powerful features like <code>&lt;Transition&gt;</code>, <code>&lt;KeepAlive&gt;</code>, and more.</p> <p>Scale with Confidence Learn how to scale Vue projects using tools like Vue Router and Pinia.</p>"},{"location":"#search-the-docs","title":"Search the Docs","text":"<p>Use the search bar at the top to find any topic quickly.</p>"},{"location":"#contribute","title":"Contribute","text":"<p>Help us improve this documentation by contributing on GitHub.</p>"},{"location":"essentials/creating-vue-app/","title":"Creating a Vue Application","text":""},{"location":"essentials/reactivity-fundamentals/","title":"Reactivity Fundamentals","text":""},{"location":"essentials/template-syntax/","title":"Template Syntax","text":""},{"location":"getting-started/introduction/","title":"Introduction","text":"<p>Learn what Vue is and how it helps you build efficient user interfaces.</p> <p>Vue 2 End of Life</p> <p>Vue 2 support ended on Dec 31, 2023. Learn more about Vue 2 EOL. - Upgrading from Vue 2? Check out the Migration Guide.</p> <p>      Learn Vue with video tutorials on     VueMastery.com </p>"},{"location":"getting-started/introduction/#what-is-vue","title":"What is Vue?","text":"<p>Vue (pronounced /vju\u02d0/, like view) is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity.</p> <p>Here is a minimal example:</p> <p><pre><code>import { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')\n</code></pre> <pre><code>&lt;div id=\"app\"&gt;\n  &lt;button @click=\"count++\"&gt;\n    Count is: {{ count }}\n  &lt;/button&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"getting-started/introduction/#result","title":"Result","text":"Count is: 0 <p>The above example demonstrates the two core features of Vue:</p> <ul> <li> <p>Declarative Rendering: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.</p> </li> <li> <p>Reactivity: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen.</p> </li> </ul> <p>You may already have questions \u2014 don't worry. We will cover every little detail in the rest of the documentation. For now, please read along so you can have a high-level understanding of what Vue offers.</p> <p>The rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step \u2013 grasp the basics first, then return to Vue. You can check your knowledge level with these overviews for JavaScript, HTML and CSS if needed. Prior experience with other frameworks helps, but is not required.</p>"},{"location":"getting-started/introduction/#the-progressive-framework","title":"The Progressive Framework","text":"<p>Vue is a framework and ecosystem that covers most of the common features needed in frontend development. But the web is extremely diverse - the things we build on the web may vary drastically in form and scale. With that in mind, Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways: - Enhancing static HTML without a build step - Embedding as Web Components on any page - Single-Page Application (SPA) - Fullstack / Server-Side Rendering (SSR) - Jamstack / Static Site Generation (SSG) - Targeting desktop, mobile, WebGL, and even the terminal If you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these.</p> <p>If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue.</p> <p>Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs.</p>"},{"location":"getting-started/introduction/#single-file-components","title":"Single-File Components","text":"<p>In most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called Single-File Component (also known as <code>*.vue</code> files, abbreviated as SFC). A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file.</p> <p>Here's the previous example, written in SFC format:</p> <p><pre><code>&lt;script setup&gt;\nimport { ref } from 'vue'\nconst count = ref(0)\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;button @click=\"count++\"&gt;Count is: {{ count }}&lt;/button&gt;\n&lt;/template&gt;\n\n&lt;style scoped&gt;\nbutton {\n  font-weight: bold;\n}\n&lt;/style&gt;\n</code></pre> SFC is a defining feature of Vue and is the recommended way to author Vue components if your use case warrants a build setup. You can learn more about the how and why of SFC in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you.</p>"},{"location":"getting-started/introduction/#api-styles","title":"API styles","text":"<p>Vue components can be authored in two different API styles: Options API and Composition API.</p>"},{"location":"getting-started/introduction/#options-api","title":"Options API","text":"<p>With Options API, we define a component's logic using an object of options such as <code>data,</code> <code>methods,</code> and <code>mounted</code>. Properties defined by options are exposed on <code>this</code> inside functions, which points to the component instance:</p> <p><pre><code>&lt;script&gt;\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event handlers in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;button @click=\"increment\"&gt;Count is: {{ count }}&lt;/button&gt;\n&lt;/template&gt;\n</code></pre> Try it in the play ground</p>"},{"location":"getting-started/introduction/#which-to-choose","title":"Which to Choose?","text":"<p>Both API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles.</p> <p>The Options API is centered around the concept of a \"component instance\" (<code>this</code> as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds. It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups.</p> <p>The Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity. It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively. In return, its flexibility enables more powerful patterns for organizing and reusing logic. You can learn more about the comparison between the two styles and the potential benefits of Composition API in the Composition API FAQ.</p> <p>If you are new to Vue, here's our general recommendation:</p> <ul> <li>For learning purposes, choose the style that is easier for you to understand. Again, most of the core   concepts are shared between the two styles. You can always pick up the other style later.</li> </ul> <p>For production use:</p> <ul> <li> <p>Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity     scenarios, e.g. progressive enhancement.</p> </li> <li> <p>Go with Composition API + Single-File Components if you plan to build full applications with Vue.</p> </li> </ul> <p>You are not required to commit to a single style while learning. The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the API Preference switches at the top of the left sidebar. </p>"},{"location":"getting-started/introduction/#still-got-questions","title":"Still Got Questions?","text":"<p>Check out our FAQ</p>"},{"location":"getting-started/introduction/#pick-your-learning-path","title":"Pick Your Learning Path","text":"<p>Different developers have different learning styles. Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible!</p> <p>Try the Tutorial For those who prefer hands-on learning.</p> <p>Read the Guide Full walkthrough of the framework.</p> <p>Check out the Examples Explore core features and UI tasks.</p> <p>\u270f\ufe0f Edit this page on GitHub</p>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":""},{"location":"getting-started/quick-start/#try-vue-online","title":"Try Vue Online","text":"<ul> <li> <p>To quickly get a taste of Vue, you can try it directly in our Playground.</p> </li> <li> <p>If you prefer a plain HTML setup without any build steps, you can use this JSFiddle as your starting point.</p> </li> <li> <p>If you are already familiar with Node.js and the concept of build tools, you can also try a complete build setup right within your browser on StackBlitz.</p> </li> </ul>"},{"location":"getting-started/quick-start/#creating-a-vue-application","title":"Creating a Vue Application","text":"<p>Prerequisites</p> <ul> <li>Familiarity with the command line  </li> <li>Install Node.js version 18.3 or higher</li> </ul> <p>This section introduces how to scaffold a Vue Single Page Application on your local machine. The created project will be using a build setup based on Vite and allow us to use Vue Single-File Components (SFCs).</p> <p>Make sure you have an up-to-date version of Node.js installed and your current working directory is the one where you intend to create a project. Run the following command in your command line (without the <code>$</code> sign):</p> <p>Install Vue with your preferred package manager:</p> npmpnpmyarnbun <pre><code>$ npm create vue@latest\n</code></pre> <pre><code>$ pnpm create vue@latest\n</code></pre> <pre><code># For Yarn (v1+)\n$ yarn create vue\n\n# For Yarn Modern (v2+)\n$ yarn create vue@latest\n\n# For Yarn ^v4.11\n$ yarn dlx create-vue@latest\n</code></pre> <pre><code>$ bun create vue@latest\n</code></pre> <p>This command will install and execute create-vue, the official Vue project scaffolding tool. You will be presented with prompts for several optional features such as TypeScript and testing support:</p> <pre><code>\n\u2714 Project name: \u2026 &lt;your-project-name&gt;\n\u2714 Add TypeScript? \u2026 No / Yes\n\u2714 Add JSX Support? \u2026 No / Yes\n\u2714 Add Vue Router for Single Page Application development? \u2026 No / Yes\n\u2714 Add Pinia for state management? \u2026 No / Yes\n\u2714 Add Vitest for Unit testing? \u2026 No / Yes\n\u2714 Add an End-to-End Testing Solution? \u2026 No / Cypress / Nightwatch / Playwright\n\u2714 Add ESLint for code quality? \u2026 No / Yes\n\u2714 Add Prettier for code formatting? \u2026 No / Yes\n\u2714 Add Vue DevTools 7 extension for debugging? (experimental) \u2026 No / Yes\n\nScaffolding project in ./&lt;your-project-name&gt;...\nDone.\n</code></pre> <p>If you are unsure about an option, simply choose <code>No</code> by hitting enter for now. Once the project is created, follow the instructions to install dependencies and start the dev server:</p> npmpnpmyarnbun <pre><code>$ cd &lt;your-project-name&gt;\n$ npm install\n$ npm run dev\n</code></pre> <pre><code>$ cd &lt;your-project-name&gt;\n$ pnpm install\n$ pnpm run dev\n</code></pre> <pre><code>$ cd &lt;your-project-name&gt;\n$ yarn\n$ yarn dev\n</code></pre> <pre><code>$ cd &lt;your-project-name&gt;\n$ bun install\n$ bun run dev\n</code></pre> <p>You should now have your first Vue project running! Note that the example components in the generated project are written using the Composition API and <code>&lt;script setup&gt;</code>, rather than the Options API. Here are some additional tips:</p> <ul> <li> <p>The recommended IDE setup is Visual Studio Code + Vue - Official extension. If you use other editors, check out the IDE support section.</p> </li> <li> <p>More tooling details, including integration with backend frameworks, are discussed in the Tooling Guide.</p> </li> <li> <p>To learn more about the underlying build tool Vite, check out the Vite docs.</p> </li> <li> <p>If you choose to use TypeScript, check out the TypeScript Usage Guide.</p> </li> </ul> <p>When you are ready to deploy your app to production, run the following:</p> npmpnpmyarnbun <pre><code>$ npm run build\n</code></pre> <pre><code>$ pnpm run build\n</code></pre> <pre><code>$ yarn build\n</code></pre> <pre><code>$ bun run build\n</code></pre> <p>This command will generate an optimized, production-ready version of your application in project's <code>./dist</code> directory. Check out the Production Deployment Guide to learn more about deploying your app to production.</p>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":""},{"location":"getting-started/quick-start/#using-vue-from-cdn","title":"Using Vue from CDN","text":"<p>For quick prototyping or embedding Vue into an existing project, you can include Vue via CDN. <pre><code>&lt;script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"&gt;&lt;/script&gt;\n</code></pre> In this example, we're using unpkg, but you can use any CDN that hosts npm packages, such as jsDelivr or cdnjs. Alternatively, you can also download the file and host it yourself on your own server or local environment.</p> <p>When using Vue from a CDN, there is no \"build step\" involved. This makes the setup a lot simpler, and is suitable for enhancing static HTML or integrating with a backend framework. However, you won't be able to use the Single-File Component (SFC) syntax.</p>"},{"location":"getting-started/quick-start/#using-the-global-build","title":"Using the Global Build","text":"<p>The above link loads the global build of Vue, where all top-level APIs are exposed as properties on the global <code>Vue</code> object. Here is a full example using the global build: <pre><code>&lt;script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"&gt;&lt;/script&gt;\n\n&lt;div id=\"app\"&gt;{{ message }}&lt;/div&gt;\n\n&lt;script&gt;\n  const { createApp, ref } = Vue\n\n  createApp({\n    setup() {\n      const message = ref('Hello vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n&lt;/script&gt;\n</code></pre> CodePen Demo</p>"},{"location":"getting-started/quick-start/#enabling-import-maps","title":"Enabling Import maps","text":"<p>In the above example, we are importing from the full CDN URL, but in the rest of the documentation you will see code like this: <pre><code>import { createApp } from 'vue'\n</code></pre> We can teach the browser where to locate the <code>vue</code> import by using Import Maps: <pre><code>&lt;script type=\"importmap\"&gt;\n  {\n    \"imports\": {\n      \"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"\n    }\n  }\n&lt;/script&gt;\n\n&lt;div id=\"app\"&gt;{{ message }}&lt;/div&gt;\n\n&lt;script type=\"module\"&gt;\n  import { createApp, ref } from 'vue'\n\n  createApp({\n    setup() {\n      const message = ref('Hello Vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n&lt;/script&gt;\n</code></pre> You can also add entries for other dependencies to the import map - but make sure they point to the ES modules version of the library you intend to use.</p> <p>Import Maps Browser Support</p> <p>Import Maps is a relatively new browser feature. Make sure to use a browser within its support range. In particular, it is only supported in Safari 16.4+.</p> <p>Notes on Production use</p> <p>The examples so far are using the development build of Vue - if you intend to use Vue from a CDN in production, make sure to check out the Production Deployment Guide. While it is possible to use Vue without a build system, an alternative approach to consider is using <code>vuejs/petite-vue</code> that could better suit the context where <code>jquery/jquery</code> (in the past) or <code>alpinejs/alpine</code> (in the present) might be used instead.</p>"},{"location":"getting-started/quick-start/#splitting-up-the-modules","title":"Splitting Up the Modules","text":"<p>As we dive deeper into the guide, we may need to split our code into separate JavaScript files so that they are easier to manage. For example: <pre><code>&lt;!-- index.html --&gt;\n&lt;div id=\"app\"&gt;&lt;/div&gt;\n\n&lt;script type=\"module\"&gt;\n  import { createApp } from 'vue'\n  import MyComponent from './my-component.js'\n\n  createApp(MyComponent).mount('#app')\n&lt;/script&gt;\n</code></pre> <pre><code>// my-component.js\nimport { ref } from 'vue'\nexport default {\n  setup() {\n    const count = ref(0)\n    return { count }\n  },\n  template: `&lt;div&gt;Count is: {{ count }}&lt;/div&gt;`\n}\n</code></pre> If you directly open the above <code>index.html</code> in your browser, you will find that it throws an error because ES modules cannot work over the <code>file://</code> protocol, which is the protocol the browser uses when you open a local file.</p> <p>Due to security reasons, ES modules can only work over the <code>http://</code> protocol, which is what the browsers use when opening pages on the web. In order for ES modules to work on our local machine, we need to serve the index.html over the <code>http://</code> protocol, with a local HTTP server.</p> <p>To start a local HTTP server, first make sure you have Node.js installed, then run <code>npx serve</code> from the command line in the same directory where your HTML file is. You can also use any other HTTP server that can serve static files with the correct MIME types.</p> <p>You may have noticed that the imported component's template is inlined as a JavaScript string. If you are using VS Code, you can install the es6-string-html extension and prefix the strings with a <code>/*html*/</code> comment to get syntax highlighting for them.</p>"},{"location":"getting-started/quick-start/#next-steps_1","title":"Next Steps","text":"<p>If you skipped the Introduction, we strongly recommend reading it before moving on to the rest of the documentation.</p> <p>Continue with the Guide The guide walks you through every aspect of the framework in full detail.</p> <p>Try the Tutorial For those who prefer hands-on learning.</p> <p>Check out the Examples Explore examples of core features and common UI tasks.</p> <p>\u270f\ufe0f Edit this page on GitHub</p>"}]}